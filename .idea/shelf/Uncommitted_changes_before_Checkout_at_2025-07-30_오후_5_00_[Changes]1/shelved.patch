Index: lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import 'package:flutter/material.dart';\r\nimport 'package:firebase_core/firebase_core.dart';\r\nimport 'package:flutter_dotenv/flutter_dotenv.dart';\r\nimport 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;\r\nimport 'screen/home_screen.dart';\r\n\r\nFuture<void> main() async {\r\n  WidgetsFlutterBinding.ensureInitialized();\r\n\r\n  await dotenv.load(fileName: \".env\");\r\n  await dotenv.load(fileName: \"assets/.env\");\r\n\r\n  FirebaseOptions firebaseOptions;\r\n\r\n  if (kIsWeb) {\r\n    firebaseOptions = FirebaseOptions(\r\n      apiKey: dotenv.env['FIREBASE_API_KEY_WEB'] ?? '',\r\n      appId: dotenv.env['FIREBASE_APP_ID_WEB'] ?? '',\r\n      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_WEB'] ?? '',\r\n      projectId: dotenv.env['FIREBASE_PROJECT_ID_WEB'] ?? '',\r\n      authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN_WEB'],\r\n      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_WEB'],\r\n      measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID_WEB'],\r\n    );\r\n  } else {\r\n    switch (defaultTargetPlatform) {\r\n      case TargetPlatform.android:\r\n        firebaseOptions = FirebaseOptions(\r\n          apiKey: dotenv.env['FIREBASE_API_KEY_ANDROID'] ?? '',\r\n          appId: dotenv.env['FIREBASE_APP_ID_ANDROID'] ?? '',\r\n          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_ANDROID'] ?? '',\r\n          projectId: dotenv.env['FIREBASE_PROJECT_ID_ANDROID'] ?? '',\r\n          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_ANDROID'],\r\n        );\r\n        break;\r\n\r\n      case TargetPlatform.iOS:\r\n        firebaseOptions = FirebaseOptions(\r\n          apiKey: dotenv.env['FIREBASE_API_KEY_IOS'] ?? '',\r\n          appId: dotenv.env['FIREBASE_APP_ID_IOS'] ?? '',\r\n          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_IOS'] ?? '',\r\n          projectId: dotenv.env['FIREBASE_PROJECT_ID_IOS'] ?? '',\r\n          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_IOS'],\r\n          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID_IOS'],\r\n        );\r\n        break;\r\n\r\n      case TargetPlatform.macOS:\r\n        firebaseOptions = FirebaseOptions(\r\n          apiKey: dotenv.env['FIREBASE_API_KEY_MACOS'] ?? '',\r\n          appId: dotenv.env['FIREBASE_APP_ID_MACOS'] ?? '',\r\n          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_MACOS'] ?? '',\r\n          projectId: dotenv.env['FIREBASE_PROJECT_ID_MACOS'] ?? '',\r\n          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_MACOS'],\r\n          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID_MACOS'],\r\n        );\r\n        break;\r\n\r\n      case TargetPlatform.windows:\r\n      case TargetPlatform.linux:\r\n        throw UnsupportedError(\r\n          'This platform is not supported for Firebase initialization.',\r\n        );\r\n\r\n      default:\r\n        throw UnsupportedError(\r\n          'This platform is not supported for Firebase initialization.',\r\n        );\r\n    }\r\n  }\r\n\r\n  print('Firebase API Key: ${firebaseOptions.apiKey}');\r\n  print('Firebase App ID: ${firebaseOptions.appId}');\r\n\r\n\r\n  await Firebase.initializeApp(options: firebaseOptions);\r\n\r\n  runApp(const MyApp());\r\n}\r\n\r\nclass MyApp extends StatelessWidget {\r\n  const MyApp({super.key});\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    return MaterialApp(\r\n      title: '토큰 관리 시스템',\r\n      debugShowCheckedModeBanner: false,\r\n      theme: ThemeData(primarySwatch: Colors.indigo),\r\n      home: const HomeScreen(),\r\n    );\r\n  }\r\n}\r\n
===================================================================
diff --git a/lib/main.dart b/lib/main.dart
--- a/lib/main.dart	(revision bd53677855c9ff43174ef1eca9f3592e8fbce29b)
+++ b/lib/main.dart	(date 1753862409375)
@@ -1,79 +1,9 @@
 import 'package:flutter/material.dart';
-import 'package:firebase_core/firebase_core.dart';
-import 'package:flutter_dotenv/flutter_dotenv.dart';
-import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
 import 'screen/home_screen.dart';
 
 Future<void> main() async {
   WidgetsFlutterBinding.ensureInitialized();
 
-  await dotenv.load(fileName: ".env");
-  await dotenv.load(fileName: "assets/.env");
-
-  FirebaseOptions firebaseOptions;
-
-  if (kIsWeb) {
-    firebaseOptions = FirebaseOptions(
-      apiKey: dotenv.env['FIREBASE_API_KEY_WEB'] ?? '',
-      appId: dotenv.env['FIREBASE_APP_ID_WEB'] ?? '',
-      messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_WEB'] ?? '',
-      projectId: dotenv.env['FIREBASE_PROJECT_ID_WEB'] ?? '',
-      authDomain: dotenv.env['FIREBASE_AUTH_DOMAIN_WEB'],
-      storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_WEB'],
-      measurementId: dotenv.env['FIREBASE_MEASUREMENT_ID_WEB'],
-    );
-  } else {
-    switch (defaultTargetPlatform) {
-      case TargetPlatform.android:
-        firebaseOptions = FirebaseOptions(
-          apiKey: dotenv.env['FIREBASE_API_KEY_ANDROID'] ?? '',
-          appId: dotenv.env['FIREBASE_APP_ID_ANDROID'] ?? '',
-          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_ANDROID'] ?? '',
-          projectId: dotenv.env['FIREBASE_PROJECT_ID_ANDROID'] ?? '',
-          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_ANDROID'],
-        );
-        break;
-
-      case TargetPlatform.iOS:
-        firebaseOptions = FirebaseOptions(
-          apiKey: dotenv.env['FIREBASE_API_KEY_IOS'] ?? '',
-          appId: dotenv.env['FIREBASE_APP_ID_IOS'] ?? '',
-          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_IOS'] ?? '',
-          projectId: dotenv.env['FIREBASE_PROJECT_ID_IOS'] ?? '',
-          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_IOS'],
-          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID_IOS'],
-        );
-        break;
-
-      case TargetPlatform.macOS:
-        firebaseOptions = FirebaseOptions(
-          apiKey: dotenv.env['FIREBASE_API_KEY_MACOS'] ?? '',
-          appId: dotenv.env['FIREBASE_APP_ID_MACOS'] ?? '',
-          messagingSenderId: dotenv.env['FIREBASE_MESSAGING_SENDER_ID_MACOS'] ?? '',
-          projectId: dotenv.env['FIREBASE_PROJECT_ID_MACOS'] ?? '',
-          storageBucket: dotenv.env['FIREBASE_STORAGE_BUCKET_MACOS'],
-          iosBundleId: dotenv.env['FIREBASE_IOS_BUNDLE_ID_MACOS'],
-        );
-        break;
-
-      case TargetPlatform.windows:
-      case TargetPlatform.linux:
-        throw UnsupportedError(
-          'This platform is not supported for Firebase initialization.',
-        );
-
-      default:
-        throw UnsupportedError(
-          'This platform is not supported for Firebase initialization.',
-        );
-    }
-  }
-
-  print('Firebase API Key: ${firebaseOptions.apiKey}');
-  print('Firebase App ID: ${firebaseOptions.appId}');
-
-
-  await Firebase.initializeApp(options: firebaseOptions);
 
   runApp(const MyApp());
 }
